#!/bin/sh
# SPDX-License-Identifier: GPL-2.0
#
# This script adds local version information from version control systems.
#

usage() {
    echo "Usage: $0 [--save-scmversion] [--save-tag] [srctree] [branch] [kmi-generation]" >&2
    exit 1
}

scm_only=false
save_tag=false
srctree=.
if test "$1" = "--save-scmversion"; then
    scm_only=true
    shift
fi
if test "$1" = "--save-tag"; then
    save_tag=true
    shift
fi
if test $# -gt 0; then
    srctree=$1
    shift
fi
if test $# -gt 0; then
    shift
    if test $# -gt 0; then
        shift
    fi
fi
if test $# -gt 0 -o ! -d "$srctree"; then
    usage
fi

scm_version() {
    local short
    short=false

    cd "$srctree"
    if test -e .scmversion; then
        cat .scmversion
        return
    fi
    if test "$1" = "--short"; then
        short=true
    fi

    if head=$(git rev-parse --verify HEAD 2>/dev/null); then
        tag="$(git describe --exact-match 2>/dev/null)"
        if [ -z "$tag" ]; then
            if $short; then
                echo "+"
                return
            fi
            if atag="$(git describe 2>/dev/null)"; then
                echo "$atag" | awk -F- '{printf("-%05d", $(NF-1))}'
            fi
            printf '%s%s' -g "$(echo $head | cut -c1-12)"
        elif $save_tag; then
            printf '%s' - "$(echo $tag)"
        fi
        if { git --no-optional-locks status -uno --porcelain 2>/dev/null || git diff-index --name-only HEAD; } | read dummy; then
            printf '%s' ''
        fi
    fi
}

collect_files() {
    local file res=

    for file; do
        case "$file" in
            *\~*) continue ;;
        esac
        if test -e "$file"; then
            res="$res$(cat "$file")"
        fi
    done
    echo "$res"
}

if $scm_only; then
    if test ! -e .scmversion; then
        res=$(scm_version)
        echo "$res" >.scmversion
    fi
    exit
fi

if test -e include/config/auto.conf; then
    . include/config/auto.conf
else
    echo "Error: kernelrelease not valid - run 'make prepare' to update it" >&2
    exit 1
fi

res="$(collect_files localversion*)"
if test ! "$srctree" -ef .; then
    res="$res$(collect_files "$srctree"/localversion*)"
fi

res="${res}${CONFIG_LOCALVERSION}${LOCALVERSION}"

if test "$CONFIG_LOCALVERSION_AUTO" = "y"; then
    res="$res$(scm_version)"
elif [ "${LOCALVERSION+set}" != "set" ]; then
    scm=$(scm_version --short)
    res="$res${scm:++}"
fi

if test -n "${BUILD_NUMBER}"; then
    res="$res-ab${BUILD_NUMBER}"
fi

echo "$res"
